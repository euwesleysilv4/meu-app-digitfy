import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  GitBranch, MessageCircle, CreditCard, AlertCircle, CheckCircle, 
  ShoppingCart, Heart, Star, Users, ArrowRight, Plus, Trash2,
  Edit3, Zap, Clock
} from 'lucide-react';

interface FunnelStep {
  id: string;
  phase: string;
  title: string;
  description: string;
  timing: string;
  message: string;
  tips?: string[];
  messages?: { scenario: string; text: string }[];
}

const phases = [
  {
    id: 1,
    title: "Capta√ß√£o e Convers√£o Inicial",
    steps: [
      {
        title: "Primeiro Contato (Lead Quente)",
        description: "Lead demonstrou interesse inicial no produto",
        timing: "Imediatamente ap√≥s demonstra√ß√£o de interesse",
        message: "Ei, vi que voc√™ se interessou em [produto]! Posso te explicar como ele pode te ajudar?",
        tips: [
          "Chamar aten√ß√£o para o benef√≠cio principal",
          "Criar urg√™ncia na resposta",
          "Personalizar a mensagem com o nome do lead"
        ]
      },
      {
        title: "Persuas√£o e Gatilhos Mentais",
        description: "Aplica√ß√£o de prova social e remo√ß√£o de obje√ß√µes",
        timing: "2-4 horas ap√≥s primeiro contato sem resposta",
        message: "Muita gente que estava na sua situa√ß√£o j√° conseguiu [resultado]. O que falta pra voc√™ dar esse passo?",
        tips: [
          "Mostrar prova social concreta",
          "Remover obje√ß√µes comuns",
          "Criar conex√£o emocional"
        ]
      },
      {
        title: "Gera√ß√£o de Pedido",
        description: "Acompanhamento do processo de pagamento",
        timing: "Imediatamente ap√≥s cada a√ß√£o",
        messages: [
          {
            scenario: "PIX Gerado",
            text: "Opa! Seu pedido foi gerado, s√≥ falta o pagamento. Garanta antes que [b√¥nus/acesso especial] acabe! üí∏"
          },
          {
            scenario: "Cart√£o Recusado",
            text: "Opa, seu pagamento n√£o foi aprovado. Quer tentar outro cart√£o ou precisa de ajuda?"
          }
        ],
        tips: [
          "Enfatizar a urg√™ncia da oferta",
          "Destacar b√¥nus exclusivos",
          "Oferecer suporte imediato para problemas"
        ]
      }
    ]
  },
  {
    id: 2,
    title: "Recupera√ß√£o de Carrinho e Remarketing",
    steps: [
      {
        title: "PIX Expirado",
        description: "Recupera√ß√£o imediata de PIX n√£o pago",
        timing: "Imediatamente ap√≥s expira√ß√£o do PIX",
        message: "Seu PIX expirou, mas ainda d√° tempo de garantir o [produto]! Gerando um novo agora pra voc√™...",
        tips: [
          "Mostrar disposi√ß√£o em ajudar",
          "Facilitar o processo de novo pagamento",
          "Manter tom prestativo"
        ]
      },
      {
        title: "Aquecimento para Remarketing",
        description: "Reativa√ß√£o com prova social e urg√™ncia",
        timing: "24 horas ap√≥s abandono",
        message: "Vi que voc√™ se interessou no [produto], mas ainda n√£o garantiu seu acesso. Muitas pessoas tinham essa d√∫vida, mas olha o que quem j√° comprou est√° dizendo: [depoimento].",
        tips: [
          "Usar depoimentos relevantes",
          "Abordar obje√ß√µes comuns",
          "Criar identifica√ß√£o com casos de sucesso"
        ]
      },
      {
        title: "Oferta Irresist√≠vel",
        description: "Apresenta√ß√£o de desconto ou b√¥nus especial",
        timing: "48 horas ap√≥s abandono",
        message: "Pra te ajudar a dar esse passo, liberamos um desconto especial de [X]% por tempo limitado! Mas essa oferta s√≥ vale at√© hoje √†s 23:59. Quer seu link com desconto?",
        tips: [
          "Especificar o valor do desconto",
          "Criar senso de urg√™ncia",
          "Destacar a exclusividade da oferta"
        ]
      },
      {
        title: "Criando Escassez e A√ß√£o R√°pida",
        description: "√öltima chance com prazo definido",
        timing: "72 horas ap√≥s abandono",
        message: "Essa pode ser sua √∫ltima chance de ter o [produto] por esse valor especial. Depois, volta ao pre√ßo normal! Clique aqui e garanta agora: [link do checkout com desconto]",
        tips: [
          "Enfatizar que √© a √∫ltima oportunidade",
          "Incluir link direto para compra",
          "Refor√ßar o prazo limite"
        ]
      }
    ]
  },
  {
    id: 3,
    title: "P√≥s-Venda e Aumento de Ticket",
    steps: [
      {
        title: "Venda Aprovada - Boas-Vindas",
        description: "Confirma√ß√£o de compra e acesso",
        timing: "Imediatamente ap√≥s aprova√ß√£o do pagamento",
        message: "Parab√©ns! Agora voc√™ faz parte do time que [benef√≠cio do produto]. Aqui est√° seu acesso: [link]",
        tips: [
          "Refor√ßar o benef√≠cio principal",
          "Fornecer acesso de forma clara",
          "Criar sensa√ß√£o de pertencimento"
        ]
      },
      {
        title: "Upsell Imediato",
        description: "Oferta de upgrade para vers√£o premium",
        timing: "30 minutos ap√≥s primeiro acesso",
        messages: [
          {
            scenario: "Oferta Premium",
            text: "Quer ter um resultado ainda mais r√°pido? Liberamos um upgrade exclusivo pra voc√™: [produto premium] com um desconto de [X]%. S√≥ hoje!"
          }
        ],
        tips: [
          "Destacar benef√≠cios adicionais",
          "Criar urg√™ncia com prazo limitado",
          "Enfatizar o desconto exclusivo"
        ]
      },
      {
        title: "Downsell Estrat√©gico",
        description: "Oferta alternativa mais acess√≠vel",
        timing: "2 horas ap√≥s recusa do Upsell",
        messages: [
          {
            scenario: "Oferta Alternativa",
            text: "Sabemos que √†s vezes um investimento maior n√£o cabe agora. Por isso, temos uma vers√£o mais acess√≠vel com os principais benef√≠cios por apenas [pre√ßo menor]."
          }
        ],
        tips: [
          "Mostrar compreens√£o com o or√ßamento",
          "Destacar benef√≠cios essenciais",
          "Apresentar pre√ßo mais atrativo"
        ]
      },
      {
        title: "Order Bump",
        description: "Oferta complementar no checkout",
        timing: "Durante ou imediatamente ap√≥s a compra",
        messages: [
          {
            scenario: "Produto Complementar",
            text: "Antes de finalizar, que tal adicionar [produto complementar] por apenas +[pre√ßo]? Essa oferta n√£o aparece depois!"
          }
        ],
        tips: [
          "Enfatizar a exclusividade da oferta",
          "Mostrar valor agregado",
          "Criar senso de oportunidade √∫nica"
        ]
      }
    ]
  },
  {
    id: 4,
    title: "Constru√ß√£o de Relacionamento e Nova Oferta",
    steps: [
      {
        title: "Follow-Up 3 Dias",
        description: "Verifica√ß√£o inicial da experi√™ncia",
        timing: "3 dias ap√≥s a compra",
        messages: [
          {
            scenario: "Verifica√ß√£o de Acesso",
            text: "E a√≠, conseguiu acessar? Como est√° indo com [produto]?"
          },
          {
            scenario: "Suporte Proativo",
            text: "Se precisar de alguma ajuda ou tiver d√∫vidas, pode me chamar! üòä"
          }
        ],
        tips: [
          "Manter tom casual e amig√°vel",
          "Mostrar disponibilidade para ajuda",
          "Identificar poss√≠veis dificuldades iniciais"
        ]
      },
      {
        title: "Follow-Up 7 Dias",
        description: "Compartilhamento de caso de sucesso",
        timing: "7 dias ap√≥s a compra",
        messages: [
          {
            scenario: "Hist√≥ria de Sucesso",
            text: "Olha o resultado do [cliente X] com o produto! Como est√° sendo pra voc√™?"
          },
          {
            scenario: "Engajamento",
            text: "J√° acessou a √°rea [X]? √â onde a maioria dos alunos consegue os melhores resultados! üöÄ"
          }
        ],
        tips: [
          "Compartilhar casos reais de sucesso",
          "Incentivar uso de √°reas espec√≠ficas",
          "Criar identifica√ß√£o com outros usu√°rios"
        ]
      },
      {
        title: "Follow-Up 14 Dias",
        description: "Apresenta√ß√£o de nova oferta",
        timing: "14 dias ap√≥s a compra",
        messages: [
          {
            scenario: "Introdu√ß√£o do Cross-Sell",
            text: "Agora que voc√™ j√° teve tempo pra testar, quero te mostrar algo que pode te ajudar ainda mais: [produto complementar ou assinatura]."
          },
          {
            scenario: "Oferta com Urg√™ncia",
            text: "Por ser aluno(a), voc√™ tem acesso a um desconto especial de [X]% + [b√¥nus exclusivo]. Mas s√≥ temos [Y] vagas dispon√≠veis!"
          }
        ],
        tips: [
          "Relacionar com a experi√™ncia atual",
          "Destacar benef√≠cios complementares",
          "Criar senso de urg√™ncia com vagas limitadas"
        ]
      },
      {
        title: "Acompanhamento Cont√≠nuo",
        description: "Manuten√ß√£o do relacionamento",
        timing: "Periodicamente ap√≥s 14 dias",
        messages: [
          {
            scenario: "Check-in Regular",
            text: "Como est√° sua jornada com [produto]? J√° alcan√ßou [objetivo espec√≠fico]? Estou aqui pra ajudar! üí™"
          },
          {
            scenario: "Dica de Valor",
            text: "Separei uma dica especial que pode te ajudar com [desafio comum]: [link do conte√∫do/recurso]"
          }
        ],
        tips: [
          "Manter contato regular",
          "Oferecer conte√∫do de valor",
          "Acompanhar progresso do cliente"
        ]
      }
    ]
  }
];

const LTVFunnel = () => {
  const [activePhase, setActivePhase] = useState(1);
  const [steps, setSteps] = useState<FunnelStep[]>([
    {
      id: '1',
      phase: 'Fase 1: Capta√ß√£o e Convers√£o Inicial',
      title: 'Primeiro Contato (Lead Quente)',
      description: 'Primeiro contato com leads que demonstraram interesse',
      timing: 'Imediatamente ap√≥s demonstra√ß√£o de interesse',
      message: 'Ei, vi que voc√™ se interessou em [produto]! Posso te explicar como ele pode te ajudar?',
      tips: [
        'Personalize a mensagem com o nome do lead',
        'Mencione o produto espec√≠fico de interesse',
        'Mantenha um tom amig√°vel e prestativo'
      ]
    },
    {
      id: '2',
      phase: 'Fase 1: Capta√ß√£o e Convers√£o Inicial',
      title: 'Persuas√£o e Gatilhos',
      description: 'Aplica√ß√£o de gatilhos mentais e prova social',
      timing: '2 horas ap√≥s primeiro contato sem resposta',
      message: 'Muita gente que estava na sua situa√ß√£o j√° conseguiu [resultado]. O que falta pra voc√™ dar esse passo?',
      tips: [
        'Inclua casos de sucesso espec√≠ficos',
        'Use n√∫meros e estat√≠sticas quando poss√≠vel',
        'Crie senso de pertencimento'
      ]
    },
    {
      id: '3',
      phase: 'Fase 2: Processo de Compra',
      title: 'PIX Gerado',
      description: 'Cliente iniciou processo de pagamento via PIX',
      timing: 'Imediatamente ap√≥s gera√ß√£o do PIX',
      message: 'Opa! Seu pedido foi gerado, s√≥ falta o pagamento. Garanta antes que [b√¥nus/acesso especial] acabe! üí∏',
      tips: [
        'Enfatize a urg√™ncia da oferta',
        'Mencione b√¥nus exclusivos',
        'Forne√ßa suporte para d√∫vidas'
      ]
    },
    {
      id: '4',
      phase: 'Fase 2: Processo de Compra',
      title: 'Cart√£o Recusado',
      description: 'Tentativa de pagamento com cart√£o n√£o aprovada',
      timing: 'Imediatamente ap√≥s recusa do cart√£o',
      message: 'Opa, seu pagamento n√£o foi aprovado. Quer tentar outro cart√£o ou precisa de ajuda?',
      tips: [
        'Ofere√ßa m√©todos alternativos de pagamento',
        'Mostre-se dispon√≠vel para ajudar',
        'Mantenha tom emp√°tico'
      ]
    },
    {
      id: '5',
      phase: 'Fase 3: P√≥s-Compra Imediato',
      title: 'Confirma√ß√£o de Compra',
      description: 'Pagamento aprovado e confirmado',
      timing: 'Imediatamente ap√≥s confirma√ß√£o do pagamento',
      message: 'Parab√©ns pela aquisi√ß√£o! üéâ Seu acesso j√° est√° liberado. Aqui est√° seu login: [dados]. Precisa de ajuda para come√ßar?',
      tips: [
        'Confirme todos os dados de acesso',
        'Ofere√ßa orienta√ß√£o inicial',
        'Demonstre disponibilidade para suporte'
      ]
    },
    {
      id: '6',
      phase: 'Fase 4: Engajamento e Reten√ß√£o',
      title: 'Acompanhamento 24h',
      description: 'Primeiro check-in ap√≥s a compra',
      timing: '24 horas ap√≥s primeiro acesso',
      message: 'E a√≠, como est√° sendo sua experi√™ncia com [produto]? J√° acessou [√°rea espec√≠fica]? Estou aqui se precisar de ajuda! üòä',
      tips: [
        'Pergunte sobre a experi√™ncia inicial',
        'Sugira pr√≥ximos passos espec√≠ficos',
        'Reforce disponibilidade para suporte'
      ]
    }
  ]);

  const [editingStep, setEditingStep] = useState<FunnelStep | null>(null);
  const [showForm, setShowForm] = useState(false);

  const handleAddStep = () => {
    const newStep: FunnelStep = {
      id: Date.now().toString(),
      phase: '',
      title: '',
      description: '',
      timing: '',
      message: '',
      tips: []
    };
    setEditingStep(newStep);
    setShowForm(true);
  };

  const handleSaveStep = (step: FunnelStep) => {
    if (editingStep) {
      setSteps(prev => {
        const existing = prev.find(s => s.id === step.id);
        if (existing) {
          return prev.map(s => s.id === step.id ? step : s);
        }
        return [...prev, step];
      });
    }
    setEditingStep(null);
    setShowForm(false);
  };

  const handleDeleteStep = (id: string) => {
    setSteps(prev => prev.filter(step => step.id !== id));
  };

  return (
    <div className="max-w-7xl mx-auto p-6">
      {/* Cabe√ßalho */}
      <div className="mb-8">
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex items-center space-x-4 mb-6"
        >
          <div className="p-3 bg-emerald-100 rounded-full">
            <GitBranch className="w-8 h-8 text-emerald-600" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-gray-800">Funil de LTV</h1>
            <p className="text-gray-600 mt-1">
              Otimize sua jornada de vendas e aumente o valor do tempo de vida do cliente
            </p>
          </div>
        </motion.div>
      </div>

      {/* Navega√ß√£o entre Fases - ATUALIZADA */}
      <div className="mb-8">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
          {phases.map((phase) => (
            <button
              key={phase.id}
              onClick={() => setActivePhase(phase.id)}
              className={`
                px-3 py-2 rounded-lg text-sm font-medium transition-all
                flex flex-col items-center justify-center text-center
                hover:shadow-md
                ${activePhase === phase.id 
                  ? 'bg-gradient-to-r from-emerald-500 to-teal-500 text-white shadow-lg shadow-emerald-500/20' 
                  : 'bg-white text-gray-600 hover:bg-emerald-50 hover:text-emerald-600 border border-gray-200'}
              `}
            >
              <span className="text-xs font-semibold mb-1">Fase {phase.id}</span>
              <span className="text-xs leading-tight">
                {phase.title}
              </span>
            </button>
          ))}
        </div>
      </div>

      {/* Conte√∫do da Fase Ativa */}
      <motion.div
        key={activePhase}
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden"
      >
        <div className="border-b border-gray-100 bg-gray-50 p-4">
          <h2 className="text-lg font-semibold text-gray-800">
            Fase {activePhase}: {phases[activePhase - 1].title}
          </h2>
        </div>

        <div className="p-6 space-y-6">
          {phases[activePhase - 1].steps.map((step, index) => (
            <React.Fragment key={index}>
              {index > 0 && <div className="border-t border-gray-100 my-6" />}
              <div className="grid md:grid-cols-12 gap-6">
                <div className="md:col-span-4">
                  <div className="flex items-start space-x-3">
                    <div className="p-2 bg-emerald-50 rounded-lg flex-shrink-0">
                      <MessageCircle className="w-5 h-5 text-emerald-500" />
                    </div>
                    <div>
                      <h3 className="font-medium text-gray-800">{step.title}</h3>
                      <p className="text-sm text-gray-600 mt-1">{step.description}</p>
                      <p className="text-xs text-emerald-600 mt-2">
                        Timing: {step.timing}
                      </p>
                    </div>
                  </div>
                </div>

                <div className="md:col-span-8">
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="space-y-4">
                      <div>
                        <h4 className="text-sm font-medium text-gray-700">
                          {step.messages ? 'Mensagens Sugeridas:' : 'Mensagem Sugerida:'}
                        </h4>
                        {step.messages ? (
                          <div className="space-y-3 mt-2">
                            {step.messages.map((msg, msgIndex) => (
                              <div key={msgIndex}>
                                <p className="text-sm font-medium text-gray-600 mb-1">
                                  {msg.scenario}:
                                </p>
                                <p className="text-gray-600 bg-white p-3 rounded border border-gray-100">
                                  {msg.text}
                                </p>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <p className="mt-2 text-gray-600 bg-white p-3 rounded border border-gray-100">
                            {step.message}
                          </p>
                        )}
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-medium text-gray-700">Dicas:</h4>
                        <ul className="mt-2 space-y-2">
                          {step.tips.map((tip, tipIndex) => (
                            <li key={tipIndex} className="flex items-center space-x-2 text-sm text-gray-600">
                              <ArrowRight className="w-4 h-4 text-emerald-500" />
                              <span>{tip}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </React.Fragment>
          ))}
        </div>
      </motion.div>

      {/* Modal de Edi√ß√£o */}
      {showForm && editingStep && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <motion.div
            className="bg-white rounded-xl p-6 w-full max-w-md"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
          >
            <h3 className="text-lg font-semibold mb-4">
              {editingStep.id ? 'Editar Etapa' : 'Nova Etapa'}
            </h3>
            <form onSubmit={(e) => {
              e.preventDefault();
              handleSaveStep(editingStep);
            }}>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Fase
                  </label>
                  <input
                    type="text"
                    value={editingStep.phase}
                    onChange={(e) => setEditingStep({...editingStep, phase: e.target.value})}
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    T√≠tulo
                  </label>
                  <input
                    type="text"
                    value={editingStep.title}
                    onChange={(e) => setEditingStep({...editingStep, title: e.target.value})}
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descri√ß√£o
                  </label>
                  <input
                    type="text"
                    value={editingStep.description}
                    onChange={(e) => setEditingStep({...editingStep, description: e.target.value})}
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Timing
                  </label>
                  <input
                    type="text"
                    value={editingStep.timing}
                    onChange={(e) => setEditingStep({...editingStep, timing: e.target.value})}
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-emerald-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Mensagem
                  </label>
                  <textarea
                    value={editingStep.message}
                    onChange={(e) => setEditingStep({...editingStep, message: e.target.value})}
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-emerald-500 h-32"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Dicas
                  </label>
                  <textarea
                    value={editingStep.tips?.join('\n')}
                    onChange={(e) => setEditingStep({
                      ...editingStep,
                      tips: e.target.value.split('\n').map(t => t.trim())
                    })}
                    className="w-full p-2 border rounded-lg focus:ring-2 focus:ring-emerald-500 h-32"
                  />
                </div>
              </div>
              <div className="flex justify-end space-x-3 mt-6">
                <button
                  type="button"
                  onClick={() => {
                    setShowForm(false);
                    setEditingStep(null);
                  }}
                  className="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600"
                >
                  Salvar
                </button>
              </div>
            </form>
          </motion.div>
        </div>
      )}
    </div>
  );
};

export default LTVFunnel; 